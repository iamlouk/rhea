use std::sync::Arc;

use crate::ast::{self, Node};
use crate::lexer::Tok;

grammar<'input>(input: &'input str);

pub Program: ast::Program<'input> = {
	<defs: (Definition)*> => {
		ast::Program { defs }
	}
};

Definition: ast::Definition<'input> = {
	TYPE <id: Id> ASSIGN_NEW <typ: Type> SEMICOLON => {
		ast::Definition::Type(id, typ)
	},
	EXTERN <id: Id> ASSIGN_NEW <args: VarArgs> COLON <rettype: Type> SEMICOLON => {
		ast::Definition::Extern(id, ast::Type::Func(Arc::new(
			args.into_iter().map(|e| e.1).collect()), Arc::new(rettype), true))
	},
	EXTERN <id: Id> ASSIGN_NEW <args: Args> COLON <rettype: Type> SEMICOLON => {
		ast::Definition::Extern(id, ast::Type::Func(Arc::new(
			args.into_iter().map(|e| e.1).collect()), Arc::new(rettype), false))
	},
	<id: Id> ASSIGN_NEW <func: Function> SEMICOLON => {
		let mut f = func.node;
		f.name = Some(id);
		ast::Definition::Function(f)
	},
};

Function: Box<Node<'input, ast::Function<'input>>> = {
	<args: VarArgs> COLON <rettype: Type> ARROW <body: Expr0> => Node::new(ast::Function {
		name: None, args: args, rettype: rettype, body: body, is_vararg: true }),
	<args: Args> COLON <rettype: Type> ARROW <body: Expr0> => Node::new(ast::Function {
		name: None, args: args, rettype: rettype, body: body, is_vararg: false })
};

Expr0: Box<Node<'input, ast::Expr<'input>>> = {
	<expr: Expr1>                         => expr,
	<ifexpr: IfExpr>                      => ifexpr,
	FOR <cond: Expr1> <block: Block>      => Node::new(ast::Expr::For(None, cond, None, block)),
	FOR <init: Expr0> SEMICOLON <cond: Expr1> SEMICOLON <inc: Expr0> <block: Block> =>
		Node::new(ast::Expr::For(Some(init), cond, Some(inc), block)),
	MUT <id: Id> ASSIGN_NEW <body: Expr0> =>
		Node::new(ast::Expr::VarDef(id, ast::VarProp::mutable(), body)),
	<id: Id> ASSIGN_NEW <body: Expr0>     =>
		Node::new(ast::Expr::VarDef(id, ast::VarProp::default(), body)),
	<lval: Expr1> ASSIGN <val: Expr0>     =>
		Node::new(ast::Expr::Assign(lval, val))
};

IfExpr: Box<Node<'input, ast::Expr<'input>>> = {
	IF <cond: Expr1> <block: Block> =>
		Node::new(ast::Expr::If(cond, block, None)),
	IF <cond: Expr1> <block: Block> ELSE <elseblock: Block> =>
		Node::new(ast::Expr::If(cond, block, Some(elseblock))),
	IF <cond: Expr1> <block: Block> ELSE <elseblock: IfExpr> =>
		Node::new(ast::Expr::If(cond, block, Some(elseblock)))
};

Expr1: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Expr1> AND <b: Expr2> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::And, b)),
	<a: Expr1> OR  <b: Expr2> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Or, b)),
	<a: Expr2> => a
};

Expr2: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Expr2> SMALLER <b: Expr3> =>
		Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Smaller, b)),
	<a: Expr2> EQUAL   <b: Expr3> =>
		Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Equal, b)),
	<a: Expr3> => a
};

Expr3: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Expr3> ADD <b: Expr4> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Add, b)),
	<a: Expr3> SUB <b: Expr4> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Sub, b)),
	<a: Expr4> => a
};

Expr4: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Expr4> MUL <b: Expr5> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Mul, b)),
	<a: Expr4> DIV <b: Expr5> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Div, b)),
	<a: Expr5> => a
};

Expr5: Box<Node<'input, ast::Expr<'input>>> = {
	MUL LBRACK <expr: Expr0> RBRACK => Node::new(ast::Expr::PtrDeref(expr, 0)),
	MUL <id: Id> => Node::new(ast::Expr::PtrDeref(Node::new(
		ast::Expr::Identifier(id, ast::VarProp::default())), 0)),

	<callee: Expr5> <args: CallArgs> => Node::new(ast::Expr::Call(callee, args)),
	<structval: Expr5> DOT <field: Id> =>
		Node::new(ast::Expr::StructFieldAccess(structval, field)),

	<arg: Expr5> AS <typ: Type> => Node::new(ast::Expr::Cast(arg, typ)),
	<lhs: Expr5> ARROW <field: Id> => Node::new(ast::Expr::StructFieldAccess(
		Node::new(ast::Expr::PtrDeref(lhs, 0)), field)),

	LBRACK <expr: Expr0> RBRACK => expr,
	BOOL     => Node::new(ast::Expr::BoolLit(<>)),
	INT      => Node::new(ast::Expr::IntLit(<>)),
	REAL     => Node::new(ast::Expr::RealLit(<>)),
	STR      => Node::new(ast::Expr::StringLit(<>)),

	<id: Id> => Node::new(ast::Expr::Identifier(<>, ast::VarProp::default())),
	<id: Id> <fields: StructLitFields> => Node::new(ast::Expr::StructLit(id, fields)),
	<block: Block> => block
};

Type: ast::Type<'input> = {
	<id: Id> => match id {
		"Real" => ast::Type::Real,
		"Bool" => ast::Type::Bool,
		"Int" => ast::Type::Int,
		"Char" => ast::Type::Char,
		"Void" => ast::Type::Void,
		id => ast::Type::Unresolved(id)
	},
	MUL <typ: Type> => ast::Type::Ptr(Arc::new(typ)),
	LCBRACK <fields: StructTypeFields> RCBRACK => ast::Type::Struct(Arc::new(fields))
};

StructLitFields: Vec<(&'input str, Node<'input, ast::Expr<'input>>)> = {
	LSBRACK <field0: Id> COLON <expr0: Expr0> <fields: (COMMA Id COLON Expr0)*> RSBRACK => {
		let mut structfields = vec![(field0, *expr0)];
		for (_, name, _, expr) in fields { structfields.push((name, *expr)); }
		structfields
	}
};

StructTypeFields: Vec<(&'input str, ast::Type<'input>)> = {
	<field0: Id> COLON <type0: Type> <fields: (COMMA Id COLON Type)*> => {
		let mut structfields = vec![(field0, type0)];
		for (_, name, _, typ) in fields { structfields.push((name, typ)); }
		structfields
	}
};

Args: Vec<(&'input str, ast::Type<'input>)> = {
	LBRACK <arg0:(Id COLON Type)?> <args:(COMMA Id COLON Type)*> RBRACK => match arg0 {
		Some((i, _, t)) => {
			let mut argvec = vec![(i, t)];
			for (_, i, _, t) in args { argvec.push((i, t)); }
			argvec
		},
		None => Vec::new()
	}
};

VarArgs: Vec<(&'input str, ast::Type<'input>)> = {
	LBRACK <arg0:(Id COLON Type)?> <args:(COMMA Id COLON Type)*> (COMMA)? DOTDOTDOT RBRACK
		=> match arg0 {
		Some((i, _, t)) => {
			let mut argvec = vec![(i, t)];
			for (_, i, _, t) in args { argvec.push((i, t)); }
			argvec
		},
		None => Vec::new()
	}
};

Block: Box<Node<'input, ast::Expr<'input>>> = {
	LCBRACK RCBRACK => ast::Node::new(ast::Expr::Block(vec![])),
	LCBRACK <arg0: Expr0> <args: (SEMICOLON Expr0)*> (SEMICOLON)? RCBRACK => {
		let mut vec = vec![arg0];
		for (_, arg) in args.into_iter() { vec.push(arg); }
		ast::Node::new(ast::Expr::Block(vec.into_iter().map(|e| *e).collect()))
	}
};

CallArgs: Vec<Node<'input, ast::Expr<'input>>> = {
	LBRACK RBRACK => vec![],
	LBRACK <arg0: Expr0> <args: (COMMA Expr0)*> RBRACK => {
		let mut vec = vec![*arg0];
		for (_, arg) in args.into_iter() { vec.push(*arg); }
		vec
	}
};

Id: &'input str = { ID => <> };

extern {
	type Location = usize;
	type Error = crate::utils::Error;

	enum Tok<'input> {
		LBRACK     => Tok::LeftBracket,
		RBRACK     => Tok::RightBracket,
		LCBRACK    => Tok::LeftCurlyBracket,
		RCBRACK    => Tok::RightCurlyBracket,
		LSBRACK    => Tok::LeftSquareBracket,
		RSBRACK    => Tok::RightSquareBracket,
		ASSIGN     => Tok::Assign,
		ASSIGN_NEW => Tok::AssignNew,
		DOTDOTDOT  => Tok::DotDotDot,
		DOT        => Tok::Dot,
		COMMA      => Tok::Comma,
		COLON      => Tok::Colon,
		ARROW      => Tok::Arrow,
		SEMICOLON  => Tok::Semicolon,
		ADD        => Tok::Add,
		SUB        => Tok::Sub,
		MUL        => Tok::Mul,
		DIV        => Tok::Div,
		AND        => Tok::And,
		OR         => Tok::Or,
		EQUAL      => Tok::Equal,
		SMALLER    => Tok::Smaller,
		IF         => Tok::If,
		ELSE       => Tok::Else,
		FOR        => Tok::For,
		EXTERN     => Tok::Extern,
		MUT        => Tok::Mut,
		AS         => Tok::As,
		STRUCT     => Tok::Struct,
		TYPE       => Tok::Type,
		ID         => Tok::Id(<&'input str>),
		STR        => Tok::Str(<&'input str>),
		INT        => Tok::Int(<i64>),
		REAL       => Tok::Real(<f64>),
		BOOL       => Tok::Bool(<bool>)
	}
}

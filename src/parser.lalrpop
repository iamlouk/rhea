use std::str::FromStr;
use std::sync::Arc;

use crate::ast::{self, Node};

grammar;

pub Program: ast::Program<'input> = {
	<defs: (Definition)*> => {
		ast::Program { defs }
	}
};

Definition: ast::Definition<'input> = {
	"extern" <id: Id> ":=" <args: VarArgs> ":" <rettype: Type> ";" => {
		ast::Definition::Extern(id, ast::Type::Func(Arc::new(
			args.into_iter().map(|e| e.1).collect()), Arc::new(rettype), true))
	},
	"extern" <id: Id> ":=" <args: Args> ":" <rettype: Type> ";" => {
		ast::Definition::Extern(id, ast::Type::Func(Arc::new(
			args.into_iter().map(|e| e.1).collect()), Arc::new(rettype), false))
	},
	<id: Id> ":=" <func: Function> ";" => {
		let mut f = func.node;
		f.name = Some(id);
		ast::Definition::Function(f)
	},
};

Function: Box<Node<'input, ast::Function<'input>>> = {
	<args: VarArgs> ":" <rettype: Type> "->" <body: Expr> => Node::new(ast::Function {
		name: None, args: args, rettype: rettype, body: body, is_vararg: true
	}),
	<args: Args> ":" <rettype: Type> "->" <body: Expr> => Node::new(ast::Function {
		name: None, args: args, rettype: rettype, body: body, is_vararg: false
	})
};

Expr: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Logic> => a,
	"if" <cond: Logic> <block: Block> "else" <expr: Expr> =>
		Node::new(ast::Expr::If(cond, block, Some(expr))),
	"if" <cond: Logic> <block: Block> => Node::new(ast::Expr::If(cond, block, None)),
	"for" <cond: Logic> <block: Block> => Node::new(ast::Expr::For(None, cond, None, block)),
	"for" <init: Expr> ";" <cond: Logic> ";" <inc: Expr> <block: Block> =>
		Node::new(ast::Expr::For(Some(init), cond, Some(inc), block)),
	"mut" <id: Id> ":=" <body: Expr> =>
		Node::new(ast::Expr::VarDef(id, ast::VarProp::mutable(), body)),
	<id: Id> ":=" <body: Expr> =>
		Node::new(ast::Expr::VarDef(id, ast::VarProp::default(), body)),
	<lval: Logic> "=" <val: Expr> =>
		Node::new(ast::Expr::Assign(lval, val))
};

Logic: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Logic> "&" <b: Condition> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::And, b)),
	<a: Logic> "|" <b: Condition> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Or, b)),
	<a: Condition> => a
};

Condition: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Condition> "<" <b: Term> =>
		Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Smaller, b)),
	<a: Condition> "==" <b: Term> =>
		Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Equal, b)),
	<a: Term> => a
};

Term: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Term> "+" <b: Factor> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Add, b)),
	<a: Term> "-" <b: Factor> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Sub, b)),
	<a: Factor> => a
};

Factor: Box<Node<'input, ast::Expr<'input>>> = {
	<a: Factor> "*" <b: Final> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Mul, b)),
	<a: Factor> "/" <b: Final> => Node::new(ast::Expr::BinaryExpr(a, ast::Operator::Div, b)),
	<a: Final> => a
};

Final: Box<Node<'input, ast::Expr<'input>>> = {
	"(" <expr: Expr> ")" => expr, 
	"*(" <expr: Expr> ")" => Node::new(ast::Expr::PtrDeref(expr, 0)),
	"*" <id: Id> => Node::new(ast::Expr::PtrDeref(Node::new(
		ast::Expr::Identifier(id, ast::VarProp::default())), 0)),
	<lit:r#""[^"]*""#> => Node::new(ast::Expr::StringLit(lit)),
	"0" => Node::new(ast::Expr::IntLit(0)),
	<lit:r"(-)?[0-9]+\.[0-9]+"> => Node::new(ast::Expr::RealLit(f64::from_str(lit).unwrap())),
	<lit:r"(-)?[1-9][0-9]*"> => Node::new(ast::Expr::IntLit(i64::from_str(lit).unwrap())),
	<callee: Final> <args: Tuple> => Node::new(ast::Expr::Call(callee, args)),
	<id: Id> => match id {
		"true" => Node::new(ast::Expr::BoolLit(true)),
		"false" => Node::new(ast::Expr::BoolLit(false)),
		_ => Node::new(ast::Expr::Identifier(id, ast::VarProp::default()))
	},
	<arg: Final> "as" <typ: Type> => Node::new(ast::Expr::Cast(arg, typ)),
	<block: Block> => block
};

Type: ast::Type<'input> = {
	<id: Id> => {
		match id {
			"Real" => ast::Type::Real,
			"Bool" => ast::Type::Bool,
			"Int" => ast::Type::Int,
			"Char" => ast::Type::Char,
			"Void" => ast::Type::Void,
			id => ast::Type::Unresolved(id)
		}
	},
	"*" <typ: Type> => ast::Type::Ptr(Arc::new(typ))
};

Args: Vec<(&'input str, ast::Type<'input>)> = {
	"(" <arg0:(Id ":" Type)?> <args:("," Id ":" Type)*> ")" => match arg0 {
		Some((i, _, t)) => {
			let mut argvec = vec![(i, t)];
			for (_, i, _, t) in args { argvec.push((i, t)); }
			argvec
		},
		None => Vec::new()
	}
};

VarArgs: Vec<(&'input str, ast::Type<'input>)> = {
	"(" <arg0:(Id ":" Type)?> <args:("," Id ":" Type)*> (",")? "..." ")" => match arg0 {
		Some((i, _, t)) => {
			let mut argvec = vec![(i, t)];
			for (_, i, _, t) in args { argvec.push((i, t)); }
			argvec
		},
		None => Vec::new()
	}
};

Block: Box<Node<'input, ast::Expr<'input>>> = {
	"{" "}" => ast::Node::new(ast::Expr::Block(vec![])),
	"{" <arg0: Expr> <args: (";" Expr)*> (";")? "}" => {
		let mut vec = vec![arg0];
		for (_, arg) in args.into_iter() { vec.push(arg); }
		ast::Node::new(ast::Expr::Block(vec.into_iter().map(|e| *e).collect()))
	}
};

Tuple: Vec<Node<'input, ast::Expr<'input>>> = {
	"(" ")" => vec![],
	"(" <arg0: Expr> <args: ("," Expr)*> ")" => {
		let mut vec = vec![arg0];
		for (_, arg) in args.into_iter() { vec.push(arg); }
		vec.into_iter().map(|e| *e).collect()
	}
};

Id: &'input str = {
	<id:r"[a-zA-Z_][a-zA-Z_0-9]*"> => id
};
